@model EditSub_CategoryViewModel

@{
    ViewBag.Title = "Edit";
    Layout = null;
}

@using (Html.BeginForm("EditPOST" , "Sub_Categories" , FormMethod.Post, new { enctype ="multipart/form-data", onSubmit= "return EditSave(this);", data_restUrl =Url.Action("Edit", "Sub_Categories",new {id=0}) }))
{
    @Html.AntiForgeryToken()
    
    <div class="container-fluid">
       <div class="row">
           <div class="col-6">
               @Html.ValidationSummary(true, "", new { @class = "text-danger" })
               @Html.HiddenFor(model => model.ID)

               <div class="form-group">
                   @Html.Label("Category", htmlAttributes: new { @class = "control-label col-md-12" })
                   <div class="col-md-12">
                       <select name="CategoriesID" class="form-control">
                           @foreach (var item in Model.AvailableCategories)
                           {
                               var selected = item.ID == Model.CategoriesID ? "Selected" : string.Empty;
                               <option value="@item.ID" @selected>@item.Name</option>
                           }
                       </select>
                   </div>
               </div>

               <div class="form-group">
                   @Html.Label("Sub Category", htmlAttributes: new { @class = "control-label col-md-12" })
                   <div class="col-md-12">
                       @Html.EditorFor(model => model.Sub_category, new { htmlAttributes = new { @class = "form-control" } })
                       @Html.ValidationMessageFor(model => model.Sub_category, "", new { @class = "text-danger" })
                   </div>
               </div>

               <div class="form-group">
                   @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-12" })
                   <div class="col-md-12">
                       @if (Model.Status == "Active")
                {
                           @Html.DropDownListFor(model => model.Status, new SelectList(new List<string> { "Active", "Inactive" }), new { @class = "form-control" })
                       }
                       else if (Model.Status == "Inactive")
                       {
                           @Html.DropDownListFor(model => model.Status, new SelectList(new List<string> { "Inactive", "Active" }), new { @class = "form-control" })

                       }
                       else
                       {
                           @Html.DropDownListFor(model => model.Status, new SelectList(new List<string> { "Active", "Inactive" }), new { @class = "form-control" })
                       }
                       @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
                   </div>
               </div>

               <div class="form-group">
                   <div class="col-md-offset-2 col-md-12">
                       <input type="submit" value="Update" class="btn btn-primary " />
                       <a class="btn btn-success" onclick="refreshAddNewTab('@Url.Action("Edit","Sub_Categories",new{id=0})',true)"><i class="fa fa-plus"></i>Cancel</a>
                   </div>
                 
              
               </div>

           </div>
       </div>
    </div>
}

